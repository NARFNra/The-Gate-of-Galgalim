[gd_scene load_steps=5 format=2]

[ext_resource path="res://art/protagonista.png" type="Texture" id=1]

[sub_resource type="GDScript" id=56]
script/source = "extends KinematicBody2D


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
var myGrav = 0.5
var isJump = false
var yspeed = 0
var xspeed = 0

var knockback = 0

var xMove
var yMove

var lastXMove
var xMoveMomentum

var upDir = Vector2(0, -1)

#attack
var slashes = load(\"res://scenes/Slash.tscn\")
var slashCool = 0

#hp bar
var hpbar = load(\"res://scenes/other/hpbar.tscn\")

var myFacing = 1

var hp = 5
var lives = 3
var damageTimer = 0
var damageFlash = 0

var collideArray = []

#will use for cutscene etc
var controlLock = false

var dead = false
var deathCirc = 0
var circAlpha = 0

#hard mode setting is 30
var invincTime = 60#30

# Called when the node enters the scene tree for the first time.
func _ready():
	lives = pvars.playerLives
	call_deferred(\"addhpbar\")
	#dead-enemy-ally-wall
	#only detect walls and ally objects
	collision_layer = 0b0010
	collision_mask = 0b0011
	add_to_group(\"protagonist\") # for certain controls
	add_to_group(\"ally\") # can be damaged by enemy
	add_to_group(\"damagable\") # used for invincibility
	RoomData.play_level_music()
	pass # Replace with function body.

func addhpbar():
	var myHPBar = hpbar.instance()
	myHPBar.add_to_group(\"hpbar\")
	get_node(\"../\").add_child(myHPBar)
	pass

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if controlLock == false:
		if slashCool > 0:
			slashCool -= 1
			if slashCool > 1:
				$Protagonista.texture = load(\"res://art/protagonistaatk2.png\")
			else:
				$Protagonista.texture = load(\"res://art/protagonista.png\")
		else:
			if Input.is_action_just_pressed(\"attack\"):
				var mySlash = slashes.instance()
				add_child(mySlash)
				if myFacing == -1:
					mySlash.position.x = -16
					mySlash.flip_h = true
				Audsys.play_sfx(\"flick.wav\")
				slashCool = 7
			pass
	
	if damageTimer > 0:
		damageTimer -= 1
	if damageTimer % 4 >= 2:
		damageFlash = 1
		$Protagonista.set_visible(false)
	else:
		damageFlash = 0
		$Protagonista.set_visible(true)
		
	if dead == true:
		post_death_process_actions()
	pass
func _physics_process(delta):
	
	#gravity acceleration, faster if holding down
	if yspeed < 10:
		yspeed += myGrav
		if controlLock == false:
			if Input.is_action_pressed(\"ui_down\"):
				yspeed += 1
	
	move_and_slide(Vector2(0, yspeed * 60), upDir)
	
	#if on ground, set yspeed to 0
	if is_on_floor():
		if yspeed > 0:
			isJump = false
			yspeed = 0
	
	#fall lower on ceiling
	if is_on_ceiling():
		if yspeed < 0:
			yspeed += 3
	
	#find x move
	if controlLock == false:
		xMove = int(Input.is_action_pressed(\"ui_right\")) - int(Input.is_action_pressed(\"ui_left\"))
	else:
		xMove = 0
	#move x
	if knockback:
		move_and_slide(Vector2(xMove + (knockback * -myFacing * 0.8) * 150, 0), upDir)
		knockback -= 1
	else:
		move_and_slide(Vector2(xMove * 300, 0), upDir)
	#if lastXMove != xMove:
	#	move_and_collide(Vector2(lastXMove * xMoveMomentum, 0))
	if xMove != 0:
		myFacing = xMove
		$Protagonista.scale.x = myFacing
	
	#jump
	if controlLock == false:
		if Input.is_action_just_pressed(\"jump\"):
			#check if on ground
			if isJump == false:
				move_and_slide(Vector2(0, 60), upDir)
				if is_on_floor() == true:
					yspeed = -11
					isJump = true
				move_and_slide(Vector2(0, -60), upDir)
			
	#keep going up until limit if holding up
	if isJump == true:
		if Input.is_action_just_released(\"jump\"):
			#on releasing jump, slow down height
			if yspeed < 0:
				yspeed *= 0.5
	
	pvars.playerX = position.x
	pvars.playerY = position.y
	
	#checking if i am sitting inside an enemy
	if damageTimer == 1:
		collideArray = $hitbox.get_overlapping_areas()
		
		for overlap in collideArray:
			if damageTimer == 1:
				if overlap.is_in_group(\"damaging\"):
					damageTimer = 0
					take_damage(1)
			else:
				continue

func _on_hitbox_area_entered(area):
	#print(area)
	if area.is_in_group(\"damaging\"):
		take_damage(1)
	pass # Replace with function body.

func take_damage(damage):
	if is_in_group(\"damagable\"):
		if damageTimer == 0:
			hp -= damage
			if hp < 1:
				Audsys.play_sfx(\"explode.wav\")#\"pow.wav\", -9.0)
				die()
			else:
				Audsys.play_sfx(\"damage.wav\")#\"shick.wav\", -9.0)
				knockback = 5
				damageTimer = invincTime#30
		pvars.playerHP = hp
	pass
	
func die():
	dead = true
	controlLock = true
	lives -= 1
	pvars.playerLives = lives
	remove_from_group(\"damagable\")
	Audsys.play_sfx(\"mist.wav\")
	Audsys.fade_out_mus(3.0)
	pass
	
func post_death_process_actions():
	if deathCirc < 600:
		deathCirc += 5
	else:
		RoomData.die_screen()
		#done by die screen
		#RoomData.reset_level()
		
	if circAlpha < 1.0:
		circAlpha += 0.02
	update()
	pass

func _draw():
	if dead == true:
		raise()
		draw_circle(Vector2(0, 0), deathCirc, Color( 1, 0, 1, circAlpha ))
	pass

func lock_player():
	controlLock = true
	pass
	
func unlock_player():
	controlLock = false
	pass
"

[sub_resource type="RectangleShape2D" id=55]
extents = Vector2( 8, 16 )

[sub_resource type="RectangleShape2D" id=74]
extents = Vector2( 10, 17 )

[node name="KinematicBody2D" type="KinematicBody2D"]
script = SubResource( 56 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 55 )

[node name="Protagonista" type="Sprite" parent="."]
texture = ExtResource( 1 )

[node name="hitbox" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="hitbox"]
shape = SubResource( 74 )

[connection signal="area_entered" from="hitbox" to="." method="_on_hitbox_area_entered"]
